You are given an unsorted permutation p1,p2,…,pn
. To sort the permutation, you choose a constant k
 (k≥1
) and do some operations on the permutation. In one operation, you can choose two integers i
, j
 (1≤j<i≤n
) such that i−j=k
, then swap pi
 and pj
.

What is the maximum value of k
 that you can choose to sort the given permutation?

A permutation is an array consisting of n
 distinct integers from 1
 to n
 in arbitrary order. For example, [2,3,1,5,4]
 is a permutation, but [1,2,2]
 is not a permutation (2
 appears twice in the array) and [1,3,4]
 is also not a permutation (n=3
 but there is 4
 in the array).

An unsorted permutation p
 is a permutation such that there is at least one position i
 that satisfies pi≠i
.

Input
Each test contains multiple test cases. The first line contains the number of test cases t
 (1≤t≤104
). The description of the test cases follows.

The first line of each test case contains a single integer n
 (2≤n≤105
) — the length of the permutation p
.

The second line of each test case contains n
 distinct integers p1,p2,…,pn
 (1≤pi≤n
) — the permutation p
. It is guaranteed that the given numbers form a permutation of length n
 and the given permutation is unsorted.

It is guaranteed that the sum of n
 over all test cases does not exceed 2⋅105
.

Output
For each test case, output the maximum value of k
 that you can choose to sort the given permutation.

We can show that an answer always exists.

Example
InputCopy
7
3
3 1 2
4
3 4 1 2
7
4 2 6 7 5 3 1
9
1 6 7 4 9 2 3 8 5
6
1 5 3 4 2 6
10
3 10 5 2 9 6 7 8 1 4
11
1 11 6 4 8 3 7 5 9 10 2
OutputCopy
1
2
3
4
3
2
3

import java.io.*;
import java.util.*;

public class CodeForces {
    static final int MOD = (int) 1e9 + 7;
    static final int INF = (int) 1e9;
    static final long LINF = (long) 1e18;

    public static void main(String[] args) throws IOException {
        FastIO io = new FastIO();
        int t = 1;
        t = io.nextInt(); 
        while (t-- > 0) {
            solve(io);
        }
        io.close(); 
    }

    static void solve(FastIO io) throws IOException {
        int n = io.nextInt();
        int[] p = io.readIntArray(n);
        // int k = io.nextInt();
        // String s = io.next(); 
        int k = 1, i = 0;
        while(p[i] == i + 1)i++;
        k =  Math.abs(p[i] - i - 1);
        for( ; i < n; i++){
            if(p[i] != i + 1) k = gcd(k, Math.abs(p[i] - i - 1));
        }
        io.println(k);
    }

    static int gcd(int m, int n){
        if(n == 0) return m;
        return gcd(n,m % n);
    }


    // --------------- Fast I/O Class ----------------
    static class FastIO {
        private final BufferedReader br;
        private final PrintWriter pw;
        private StringTokenizer st;

        public FastIO() {
            br = new BufferedReader(new InputStreamReader(System.in));
            pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
            st = new StringTokenizer(""); 
        }

        public String next() throws IOException {
            while (!st.hasMoreTokens()) {
                String line = br.readLine();
                if (line == null)
                    return null;
                st = new StringTokenizer(line);
            }
            return st.nextToken();
        }

        public int nextInt() throws IOException {
            return Integer.parseInt(next());
        }

        public long nextLong() throws IOException {
            return Long.parseLong(next());
        }

        public double nextDouble() throws IOException {
            return Double.parseDouble(next());
        }

        public String nextLine() throws IOException {
            st = new StringTokenizer(""); 
            return br.readLine();
        }

        public int[] readIntArray(int n) throws IOException {
            int[] arr = new int[n];
            for (int i = 0; i < n; i++)
                arr[i] = nextInt();
            return arr;
        }

        public long[] readLongArray(int n) throws IOException {
            long[] arr = new long[n];
            for (int i = 0; i < n; i++) arr[i] = nextLong();
            return arr;
        }

        public char[] readCharArray() throws IOException {
            return next().toCharArray();
        }

        public void print(Object o) {
            pw.print(o);
        }

        public void println(Object o) {
            pw.println(o);
        }

        public void println() {
            pw.println();
        }

        public void close() {
            pw.flush();
            pw.close();
        }
    }

}
