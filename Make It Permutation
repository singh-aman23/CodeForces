There is a matrix A
 of size n×n
 where Ai,j=j
 for all 1≤i,j≤n
.

In one operation, you can select a row and reverse any subarray∗
 in it.

Find a sequence of at most 2n
 operations such that every column will contain a permutation†
 of length n
.

It can be proven that the construction is always possible. If there are multiple solutions, output any of them.

∗
An array a
 is a subarray of an array b
 if a
 can be obtained from b
 by deleting zero or more elements from the beginning and zero or more elements from the end.

†
A permutation of length n
 is an array consisting of n
 distinct integers from 1
 to n
 in arbitrary order. For example, [2,3,1,5,4]
 is a permutation, but [1,2,2]
 is not a permutation (2
 appears twice in the array), and [1,3,4]
 is also not a permutation (n=3
 but there is 4
 in the array).

Input
Each test contains multiple test cases. The first line contains the number of test cases t
 (1≤t≤100
). The description of the test cases follows.

The first line of each test case contains one integer n
 (3≤n≤5000
) — denoting the number of rows and columns in the matrix.

It is guaranteed that the sum of n
 over all test cases does not exceed 5000
.

Output
For each test case, on the first line, print an integer k
 (0≤k≤2n)
, the number of operations you wish to perform. On the next lines, you should print the operations.

To print an operation, use the format "ilr
" (1≤l≤r≤n
 and 1≤i≤n
) which reverses the subarray Ai,l
, Ai,l+1
, …
, Ai,r
.

Example
InputCopy
2
3
4
OutputCopy
4
2 1 3
2 2 3
3 1 2
3 2 3
5
2 1 4
3 1 3
3 2 4
4 3 4
4 1 2

import java.util.*;

public class CodeForces {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int t = sc.nextInt();
    while(t-- > 0){
      int n = sc.nextInt();
      int k = 2 * (n - 1);
      System.out.println(k);
      System.out.print(1 + " ");
      System.out.print(2 + " ");
      System.out.print(n + " ");
      System.out.println();
      for(int i = 2; i <= n - 1; i++){
        System.out.print(i + " ");
      System.out.print(1 + " ");
      System.out.print(i + " ");
      System.out.println();
      System.out.print(i + " ");
      System.out.print((i + 1) + " ");
      System.out.print(n + " ");
      System.out.println();
      }
      System.out.print(n + " ");
      System.out.print(1 + " ");
      System.out.print(n + " ");
      System.out.println();

    }
  }
}


import java.util.*;

public class CodeForces {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int t = sc.nextInt();
    while(t-- > 0){
      int n = sc.nextInt();
      int k = 2 * (n - 1);
      System.out.println(k);
       System.out.printf("%d %d %d\n", 1, 2, n);
  for (int i = 2; i <= n - 1; i++) {
    System.out.printf("%d %d %d\n", i, 1, i);
    System.out.printf("%d %d %d\n", i, i + 1, n);
  }
  System.out.printf("%d %d %d\n", n, 1, n);

    }
  }
}
